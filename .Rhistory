covid_before_after = as.factor(case_when(
Date >= "2020-03-12" & Date <= "2021-06-01"~ "In-covid",
Date <= "2020-03-12" ~"Pre-covid",
TRUE ~ "Post-covid"
))
)
#rename variables
df_restr <- df_restr %>% mutate(
home_goals = FTHG,
away_goals = FTAG,
team_name = value,
team_status = Team,
covid_y_n = covid,
date = Date
)
#restricted data set with only the variables of interest
df_restr <- df_restr %>%
select(date, home_goals, away_goals, team_name, team_status, covid_y_n, covid_before_after, win, goals )
#data frame with only the values before covid
df_before <- df_restr %>%
filter(covid_before_after == 'Pre-covid')
#data frame with only the values during covid
df_during <- df_restr %>%
filter(covid_before_after == 'In-covid')
#data frame with only the values after covid
df_after <- df_restr %>%
filter(covid_before_after == 'Post-covid')
#data frames that count the number of victories before covid and all periods of time
df_wins_before <- df_restr %>%
filter(covid_before_after =='Pre-covid')%>%
filter(win == "1")%>%
select(team_name, team_status, win)%>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_wins_all <- df_restr %>%
select(team_name, team_status, win)%>%
filter(win == "1") %>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_wins_during <- df_restr %>%
filter(covid_before_after =='In-covid')%>%
filter(win == "1")%>%
select(team_name, team_status, win)%>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_wins_after <- df_restr %>%
filter(covid_before_after =='Post-covid')%>%
filter(win == "1")%>%
select(team_name, team_status, win)%>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
test_2<- df_restr %>%
select(date, home_goals, away_goals) %>%
group_by(date) %>%
summarise(avg_home = mean(home_goals), avg_away = mean(away_goals)) %>%
mutate(avg_diff = avg_home - avg_away)
test_2 %>% ggplot(aes(x=date, y=avg_diff)) +
geom_line() +
geom_hline(yintercept= mean(test_2$avg_diff), col = 'red')+
geom_rect(aes(xmin = as.Date("2020-03-12", format = "%Y-%m-%d"), xmax = as.Date("2021-06-01", format = "%Y-%m-%d"), ymin = -Inf, ymax = Inf), fill = "blue", alpha = 0.003) +
labs(x = 'Date', y = 'Average difference of goals', title = 'Difference between home goals and away goals')
test_2 %>% ggplot(aes(x=date, y=avg_diff)) +
geom_line() +
geom_hline(yintercept= mean(test_2$avg_diff), col = 'red')+
geom_rect(aes(xmin = as.Date("2020-03-12", format = "%Y-%m-%d"), xmax = as.Date("2021-06-01", format = "%Y-%m-%d"), ymin = -Inf, ymax = Inf), fill = "blue", alpha = 0.003) + geom_text(aes(0,mean(test_2$avg_diff),label = mean(test_2$avg_diff), vjust = -1)) +
labs(x = 'Date', y = 'Average difference of goals', title = 'Difference between home goals and away goals')
test_2 %>% ggplot(aes(x=date, y=avg_diff)) +
geom_line() +
geom_hline(yintercept= mean(test_2$avg_diff), col = 'red', show.legend = T)+
geom_rect(aes(xmin = as.Date("2020-03-12", format = "%Y-%m-%d"), xmax = as.Date("2021-06-01", format = "%Y-%m-%d"), ymin = -Inf, ymax = Inf), fill = "blue", alpha = 0.003) +
labs(x = 'Date', y = 'Average difference of goals', title = 'Difference between home goals and away goals')
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
lapply(c("dplyr","chron","ggplot2","tidyr","questionr","survival","forcats","tidyselect",
"data.table","table1","lubridate", "ggpubr","viridis","finalfit","survminer",
"ggpubr", "ggthemes", "gridExtra", "rstatix","stringr",
"wesanderson","kableExtra", "naniar","boot","scales","ggsci", "stringr",
"Hmisc","DescTools","swimplot", 'stats', 'EnvStats', 'finalfit'),
library, character.only=TRUE)
Sys.setlocale("LC_TIME", "English")
#data bases import
df18 <- read.csv(file = '2018-19.csv')
df19 <- read.csv(file = '2019-20.csv')
df20 <- read.csv(file = '2020-21.csv')
df21 <- read.csv(file = '2021-22.csv')
set.seed(435) #set the seed for reproducible results
#merge the data sets together
df <- bind_rows(df18, df19, df20, df21)
#date
df <- df%>%mutate(
Date = as.Date(Date , format = "%d/%m/%Y")
)
#restrict the number of variables
df_restr <- df %>% select(Date, HomeTeam, AwayTeam, FTR, FTHG, FTAG)
#pivot longer to create two rows for each match
df_restr <- df_restr %>% pivot_longer(cols = c(HomeTeam, AwayTeam), names_to = 'Team')
#variable win
df_restr <- df_restr%>% mutate(
win = as.factor(case_when(
Team == 'HomeTeam' & FTR == 'H' ~ 1,
Team == 'AwayTeam' & FTR == 'H' ~ 0,
Team == 'HomeTeam' & FTR == 'A' ~ 0,
Team == 'AwayTeam' & FTR == 'A' ~ 1,
Team == 'HomeTeam' & FTR == 'D' ~ 2,
Team == 'AwayTeam' & FTR == 'D' ~ 2,
)
))
#score variable
df_restr <- df_restr %>% mutate(
goals = case_when(
Team == 'HomeTeam' ~ FTHG,
Team == 'AwayTeam' ~ FTAG
)
)
#variable to assess if covid or not
df_restr <- df_restr %>% mutate(
covid = as.factor(case_when(
Date >= "2020-03-12" & Date <= "2021-06-01"~ 1,
TRUE ~ 0
))
)
df_restr <- df_restr %>% mutate(
covid_before_after = as.factor(case_when(
Date >= "2020-03-12" & Date <= "2021-06-01"~ "In-covid",
Date <= "2020-03-12" ~"Pre-covid",
TRUE ~ "Post-covid"
))
)
#rename variables
df_restr <- df_restr %>% mutate(
home_goals = FTHG,
away_goals = FTAG,
team_name = value,
team_status = Team,
covid_y_n = covid,
date = Date
)
#restricted data set with only the variables of interest
df_restr <- df_restr %>%
select(date, home_goals, away_goals, team_name, team_status, covid_y_n, covid_before_after, win, goals )
#data frame with only the values before covid
df_before <- df_restr %>%
filter(covid_before_after == 'Pre-covid')
#data frame with only the values during covid
df_during <- df_restr %>%
filter(covid_before_after == 'In-covid')
#data frame with only the values after covid
df_after <- df_restr %>%
filter(covid_before_after == 'Post-covid')
#data frames that count the number of victories before covid and all periods of time
df_wins_before <- df_restr %>%
filter(covid_before_after =='Pre-covid')%>%
filter(win == "1")%>%
select(team_name, team_status, win)%>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_wins_all <- df_restr %>%
select(team_name, team_status, win)%>%
filter(win == "1") %>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_wins_during <- df_restr %>%
filter(covid_before_after =='In-covid')%>%
filter(win == "1")%>%
select(team_name, team_status, win)%>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_wins_after <- df_restr %>%
filter(covid_before_after =='Post-covid')%>%
filter(win == "1")%>%
select(team_name, team_status, win)%>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
View(df_wins_after_bis)
View(df_restr)
View(df_restr)
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
)
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win)%>%
summarise(number=n())%>%
mutate(numb_win = sum(number))
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number=n())%>%
mutate(numb_win = sum(number))
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise()
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(s = sum(win_numeric))
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric))
df_wins_during_bis
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric)) %>%
group_by(team_name, team_status)%>%
summarise(sum = sum(s))
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric))
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric)) %>%
group_by(team_name, team_status)%>%
summarise(sum = sum(s))
df_wins_after_draw <- df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric)) %>%
group_by(team_name, team_status)%>%
summarise(score = sum(s))
model_wins_after_draw <- glm(df_wins_after_draw$score ~ df_wins_after_draw$team_status, family=poisson(link="log"))
summary(model_wins_after_draw)
df_wins_before_draw <- df_restr %>%
filter(covid_before_after =='Pre-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric)) %>%
group_by(team_name, team_status)%>%
summarise(score = sum(s))
model_wins_before_draw <- glm(df_wins_before_draw$score ~ df_wins_before_draw$team_status, family=poisson(link="log"))
summary(model_wins_before_draw)
summary(model_wins_during_draw)
model_wins_before_draw <- glm(df_wins_before_draw$score ~ df_wins_before_draw$team_status, family=poisson(link="log"))
summary(model_wins_before_draw)
model_wins_during_draw <- glm(df_wins_during_draw$score ~ df_wins_during_draw$team_status, family=poisson(link="log"))
df_wins_during_draw
df_wins_during_draw <- df_restr %>%
filter(covid_before_after =='In-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric)) %>%
group_by(team_name, team_status)%>%
summarise(score = sum(s))
model_wins_during_draw <- glm(df_wins_during_draw$score ~ df_wins_during_draw$team_status, family=poisson(link="log"))
summary(model_wins_before_draw)
summary(model_wins_during_draw)
summary(model_wins_after_draw)
require(zoo)
require(tseries)
library(dplyr)
#base de données
setwd("C:/Users/candi/Desktop/ETUDES/ENSAE2A/semestre 2/séries temporelles/series temp/series_temp")
data <- read.csv('valeurs_mensuelles_pesticides.csv', sep=";")
data <- data[2]
data <- as.data.frame(data[-(1:3),])#on enlève les premières lignes qui ne sont pas des données
indice <- as.data.frame(as.numeric(unlist(data)))
xm.source <- zoo(indice[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
T <- length(xm.source)
test <- tail(xm.source, n=2) #pour comparer nos prévisions avec les vraies données
xm <- xm.source[(250):(T-2)] #pour le modèle
mean(xm.source)
plot(xm, xaxt="n") #plot des données
axis(side=1,at=seq(0,400,12)) #pour mettre l'axe x
par(mfrow=c(1,2))
acf(xm)
pacf(xm) #saisonnalité apparente : saisonnalité de 12 donc annuelle, avec été et hiver différenciés (corr pos et neg)
dev.off()
pp.test(xm) #test de philippe perron, on rejette à 1% l'hypothèse que la série n'est pas stationnaire
#on retire la moyenne de xm
xm <- xm - mean(xm)
#on enlève la saisonnalité apparente
xm <- diff(xm, lag = 12)
par(mfrow=c(1,2))
acf(xm)
pacf(xm) #la saisonnalité a bien disparu
#on identifie avec l'acf et la pacf les ordres maximums à tester
pmax = 12
qmax = 11
#modèle
#tous les modèles
selection_print <- function(pmax, qmax){
res_aic <- matrix(nrow=pmax, ncol=qmax)
for (p in 0:pmax){
for (q in 0:qmax){
model <- arima(xm, c(p,0, q))
res_aic[p,q] <- model$aic
print(c(p,q))
}}
return(res_aic)
}
selec <- selection_print(pmax,qmax) #matrice qui renvoie les AIC de tous les modèles
require(zoo)
require(tseries)
library(dplyr)
#base de données
setwd("C:/Users/candi/Desktop/ETUDES/ENSAE2A/semestre 2/séries temporelles/series temp/series_temp")
data <- read.csv('valeurs_mensuelles_pesticides.csv', sep=";")
data <- data[2]
data <- as.data.frame(data[-(1:3),])#on enlève les premières lignes qui ne sont pas des données
indice <- as.data.frame(as.numeric(unlist(data)))
xm.source <- zoo(indice[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
T <- length(xm.source)
test <- tail(xm.source, n=2) #pour comparer nos prévisions avec les vraies données
xm <- xm.source[(250):(T-2)] #pour le modèle
mean(xm.source)
plot(xm, xaxt="n") #plot des données
axis(side=1,at=seq(0,400,12)) #pour mettre l'axe x
par(mfrow=c(1,2))
acf(xm)
pacf(xm) #saisonnalité apparente : saisonnalité de 12 donc annuelle, avec été et hiver différenciés (corr pos et neg)
dev.off()
pp.test(xm) #test de philippe perron, on rejette à 1% l'hypothèse que la série n'est pas stationnaire
#on retire la moyenne de xm
xm <- xm - mean(xm)
#on enlève la saisonnalité apparente
xm <- diff(xm, lag = 12)
par(mfrow=c(1,2))
acf(xm)
pacf(xm) #la saisonnalité a bien disparu
#on identifie avec l'acf et la pacf les ordres maximums à tester
pmax = 12
qmax = 11
#modèle
#tous les modèles
selection_print <- function(pmax, qmax){
res_aic <- matrix(nrow=pmax+1, ncol=qmax+1)
for (p in 0:pmax){
for (q in 0:qmax){
model <- arima(xm, c(p,0, q))
res_aic[p,q] <- model$aic
print(c(p,q))
}}
return(res_aic)
}
selec <- selection_print(pmax,qmax) #matrice qui renvoie les AIC de tous les modèles
which(selec == min(selec),  arr.ind=TRUE)
warnings()
which(selec == min(selec),  arr.ind=TRUE) #on choisit l'AIC le plus petit
#modèle
#tous les modèles
selection_print <- function(pmax, qmax){
res_aic <- matrix(nrow=pmax, ncol=qmax)
for (p in 0:pmax){
for (q in 0:qmax){
model <- arima(xm, c(p,0, q))
res_aic[p,q] <- model$aic
print(c(p,q))
}}
return(res_aic)
}
selec <- selection_print(pmax,qmax) #matrice qui renvoie les AIC de tous les modèles
View(selec)
arima(xm,c(0,0,0))
arima(xm,c(1,0,1))
#au dessus on n'a pas exploré les modèles avec p = 0 ou q = 0 donc on les explore ci-dessous
selection_bis <- function(pmax, qmax){
p_0 <- numeric(length = qmax)
q_0 <- numeric(length = pmax)
for (q in 1:qmax){
p_0 <- arima(xm, c(0,0,q))$aic
}
for (p in 1:pmax){
q_0 <- arima(xm, c(p,0,0))$aic
}
return(list(p_0, q_0))
}
selection_bis(12, 11)
#au dessus on n'a pas exploré les modèles avec p = 0 ou q = 0 donc on les explore ci-dessous
selection_bis <- function(pmax, qmax){
p_0 <- numeric(length = qmax)
q_0 <- numeric(length = pmax)
for (q in 1:qmax){
p_0[q] <- arima(xm, c(0,0,q))$aic
}
for (p in 1:pmax){
q_0[p] <- arima(xm, c(p,0,0))$aic
}
return(list(p_0, q_0))
}
selection_bis(12, 11)
res_0 <- selection_bis(12, 11)
min(res_0)
min(res_0[1])
res_0[1]
res_0[[1]]
min(res_0[[1]])
min(res_0[[2]])
min(selec)
library(xtable)
xtable(signific)
xtable(selec)
xtable((as.data.frame(selec))%>%select(V1, V2, V3, V4, V5, V6, V7, V8, V9))
xtable((as.data.frame(selec))%>%select(V10, V11))
xtable((as.data.frame(selec))%>%select(V1, V2, V3, V4, V5, V6, V7, V8, V9))
xtable((as.data.frame(selec))%>%select(V8, V9, V10, V11))
