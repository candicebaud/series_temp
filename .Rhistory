select(team_name, team_status, win)%>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_wins_all <- df_restr %>%
select(team_name, team_status, win)%>%
filter(win == "1") %>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_wins_during <- df_restr %>%
filter(covid_before_after =='In-covid')%>%
filter(win == "1")%>%
select(team_name, team_status, win)%>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_wins_after <- df_restr %>%
filter(covid_before_after =='Post-covid')%>%
filter(win == "1")%>%
select(team_name, team_status, win)%>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
View(df_wins_after_bis)
View(df_restr)
View(df_restr)
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status)%>%
summarise(number=n())%>%
mutate(numb_win = number)
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
)
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win)%>%
summarise(number=n())%>%
mutate(numb_win = sum(number))
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number=n())%>%
mutate(numb_win = sum(number))
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise()
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(s = sum(win_numeric))
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric))
df_wins_during_bis
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric)) %>%
group_by(team_name, team_status)%>%
summarise(sum = sum(s))
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric))
df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric)) %>%
group_by(team_name, team_status)%>%
summarise(sum = sum(s))
df_wins_after_draw <- df_restr %>%
filter(covid_before_after =='Post-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric)) %>%
group_by(team_name, team_status)%>%
summarise(score = sum(s))
model_wins_after_draw <- glm(df_wins_after_draw$score ~ df_wins_after_draw$team_status, family=poisson(link="log"))
summary(model_wins_after_draw)
df_wins_before_draw <- df_restr %>%
filter(covid_before_after =='Pre-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric)) %>%
group_by(team_name, team_status)%>%
summarise(score = sum(s))
model_wins_before_draw <- glm(df_wins_before_draw$score ~ df_wins_before_draw$team_status, family=poisson(link="log"))
summary(model_wins_before_draw)
summary(model_wins_during_draw)
model_wins_before_draw <- glm(df_wins_before_draw$score ~ df_wins_before_draw$team_status, family=poisson(link="log"))
summary(model_wins_before_draw)
model_wins_during_draw <- glm(df_wins_during_draw$score ~ df_wins_during_draw$team_status, family=poisson(link="log"))
df_wins_during_draw
df_wins_during_draw <- df_restr %>%
filter(covid_before_after =='In-covid')%>%
select(team_name, team_status, win)%>%
mutate(
win_numeric = case_when(
win == 0 ~ 0,
win == 1 ~ 1,
win == 2 ~ 0.5
)
) %>%
group_by(team_name, team_status, win_numeric)%>%
summarise(number = n(),s = sum(win_numeric)) %>%
group_by(team_name, team_status)%>%
summarise(score = sum(s))
model_wins_during_draw <- glm(df_wins_during_draw$score ~ df_wins_during_draw$team_status, family=poisson(link="log"))
summary(model_wins_before_draw)
summary(model_wins_during_draw)
summary(model_wins_after_draw)
require(zoo)
require(tseries)
library(dplyr)
#base de données
data <- read.csv('valeurs_mensuelles_pesticides.csv', sep=";")
setwd("C:/Users/candi/Desktop/ETUDES/ENSAE2A/semestre 2/séries temporelles/series temp/series_temp")
require(zoo)
require(tseries)
library(dplyr)
#base de données
data <- read.csv('valeurs_mensuelles_pesticides.csv', sep=";")
data <- data[2]
data <- as.data.frame(data[-(1:3),])#on enlève les premières lignes qui ne sont pas des données
indice <- as.data.frame(as.numeric(unlist(data)))
xm.source <- zoo(indice[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
T <- length(xm.source)
test <- tail(xm.source, n=4) #pour comparer nos prévisions avec les vraies données
xm <- xm.source[(250):(T-4)] #pour le modèle
mean(xm.source)
data <- read.csv('valeurs_mensuelles_pesticides.csv', sep=";")
data <- data[2]
data <- as.data.frame(data[-(1:3),])#on enlève les premières lignes qui ne sont pas des données
indice <- as.data.frame(as.numeric(unlist(data)))
xm.source <- zoo(indice[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
T <- length(xm.source)
test <- tail(xm.source, n=4) #pour comparer nos prévisions avec les vraies données
xm <- xm.source[(250):(T-4)] #pour le modèle
mean(xm.source)
plot(xm, xaxt="n") #plot des données
axis(side=1,at=seq(0,400,12)) #pour mettre l'axe x
par(mfrow=c(1,2))
acf(xm)
pacf(xm) #saisonnalité apparente : saisonnalité de 12 donc annuelle, avec été et hiver différenciés (corr pos et neg)
dev.off()
pp.test(xm) #test de philippe perron, on rejette à 1% l'hypothèse que la série n'est pas stationnaire
#on enlève la saisonnalité apparente
xm <- diff(xm, lag = 12)
par(mfrow=c(1,2))
acf(xm)
pacf(xm) #la saisonnalité a bien disparu sauf sur la pacf
#on retire la moyenne de xm
xm <- xm - mean(xm)
pmax = 12
qmax = 11
#modèle
#tous les modèles
selection_print <- function(pmax, qmax){
res_aic <- matrix(nrow=pmax, ncol=qmax)
for (p in 0:pmax){
for (q in 0:qmax){
model <- arima(xm, c(p,0, q))
res_aic[p,q] <- model$aic
print(c(p,q))
}}
return(res_aic)
}
selec <- selection_print(pmax,qmax)
which(selec == min(selec),  arr.ind=TRUE)
p = 5
q = 11
arma_fit <- arima(xm, c(5,0,11))
arma_fit
#résidus
plot(arma_fit$residuals)
acf(arma_fit$residuals)
pacf(arma_fit$residuals)
hist(arma_fit$residuals)
library(forecast)
checkresiduals(arma_fit)
#Q test
#test
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(arma_fit$residuals, 24, 5) #tests de LB pour les ordres 1 a 24
#on rejette le fait que les résidus soient corrélés
signif <- function(estim){ #fonction de test des significations individuelles des coefficients
coef <- estim$coef
se <- sqrt(diag(estim$var.coef))
t <- coef/se
pval <- (1-pnorm(abs(t)))*2
return(rbind(coef,se,pval))
}
signific <- as.data.frame(signif(arma_fit))
#prévision
model_pred <- predict(arma_fit, n.ahead=4)
serie_pred <- zoo(c(xm, model_pred$pred))
xm_all <- xm.source[250:T] - mean(xm.source[250:(T-4)])
xm_all <- diff(xm_all, lag = 12)
plot(xm_all, col = 'red')
lines(serie_pred, col = 'black')
U = model_pred$pred + model_pred$se
L = model_pred$pred - model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
dev.off()
xm_all <- diff(xm_all, lag = 12)
plot(xm_all, col = 'red')
lines(serie_pred, col = 'black')
U = model_pred$pred + model_pred$se
L = model_pred$pred - model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
plot(xm_all, col = 'red')
lines(serie_pred, col = 'black')
U = model_pred$pred + model_pred$se
L = model_pred$pred - model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
plot(xm_all, col = 'red')
#lines(serie_pred, col = 'black')
U = model_pred$pred + model_pred$se
L = model_pred$pred - model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
plot(serie_pred)
plot(xm)
plot(xm_al)
plot(xm_all)
plot(xm, col = 'red')
lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
plot(xm, col = 'black')
lines(serie_pred, col = 'red')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = "p", col = "red")
plot(xm, col = 'red')
lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
plot(xm, col = 'red')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
plot(xm, col = 'black')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
plot(xm, col = 'black')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
plot(xm_all, col = 'black')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
plot(xm_all, col = 'black')
plot(xm_all, col = 'black')
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
plot(xm_all, col = 'black')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = blue (0.6, alpha=0.2))
plot(xm_all, col = 'black')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
plot(xm_all, col = 'black')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = red (0.6, alpha=0.2))
plot(xm_all, col = 'black')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
plot(xm_all, col = 'black', ylab = 'Série', main = 'Prévision des 4 prochaines valeurs de la série en rouge et leur intervalle de confiance')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
plot(xm_all, col = 'black', ylab = 'Série', main = 'Prévision des 4 prochaines valeurs de la série')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
mean(model_pred$pred)
mean(serie_pred)
plot(xm_all, col = 'black', ylab = 'Série', main = 'Prévision des 4 prochaines valeurs de la série')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
legend("topleft", legend=c("Données réelles", "Prédiction"),
col=c("red", "black"), lty=1:2, cex=0.8)
plot(xm_all, col = 'black', ylab = 'Série', main = 'Prévision des 4 prochaines valeurs de la série')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
legend("bottomleft", legend=c("Données réelles", "Prédiction"),
col=c("red", "black"), lty=1:2, cex=0.4)
plot(xm_all, col = 'black', ylab = 'Série', main = 'Prévision des 4 prochaines valeurs de la série')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
legend("topleft", legend=c("Données réelles", "Prédiction"),
col=c("red", "black"), lty=1:2, cex=0.4)
legend("topleft", legend=c("Données réelles", "Prédiction"),
col=c("red", "black"), lty=1:2, cex=0.5)
plot(xm_all, col = 'black', ylab = 'Série', main = 'Prévision des 4 prochaines valeurs de la série')
#lines(serie_pred, col = 'black')
U = model_pred$pred + 1.96*model_pred$se
L = model_pred$pred - 1.96*model_pred$se
xx = c(time (U), rev (time (U)))
yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray (0.6, alpha=0.2))
lines(model_pred$pred, type = "p", col = "red")
lines(model_pred$pred, type = 'l', col = 'red')
legend("topleft", legend=c("Données réelles", "Prédiction"),
col=c("red", "black"), lty=1:2, cex=0.4)
View(signific)
#export de la table de significativité des modèles
write.csv(signficativite, "C:\Users\candi\Desktop\ETUDES\ENSAE2A\semestre 2\séries temporelles\series temp\series_temp", row.names=FALSE)
#export de la table de significativité des modèles
write.csv(signficativite, "C:/Users/candi/Desktop/ETUDES/ENSAE2A/semestre 2/séries temporelles/series temp/series_temp", row.names=FALSE)
#export de la table de significativité des modèles
write.csv(signific, "C:/Users/candi/Desktop/ETUDES/ENSAE2A/semestre 2/séries temporelles/series temp/series_temp", row.names=FALSE)
library(xtable)
xtable(signific)
View(signific)
signific_6 <- signific %>% select(ar1, ar2, ar3, ar4, ar5, ma1, ma2, ma3, ma4, ma5, ma6)
xtable(signific_6)
xtable(signific %>% select(ar1, ar2, ar3, ar4, ar5, ma1, ma2, ma3, ma4, ma5, ma6))
xtable(signific %>% select(ma7, ma8, ma9, ma10, ma11, intercept))
